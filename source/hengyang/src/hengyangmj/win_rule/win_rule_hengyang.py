# -*- coding=utf-8"""Created on 2017年3月6日庄家规则@author: nick.kai.lee"""from difang.majiang2.player.hand.hand import MHandfrom difang.majiang2.win_rule.win_rule import MWinRulefrom hengyangmj.hengyang_log import HYLogfrom hengyangmj.win_rule.win_rule_functions import HYWinRuleFunctionclass MWinRuleHengYang(MWinRule):    """开局随机庄家，之后连庄的规则    庄家赢，连庄    闲家赢，闲家坐庄    """    def __init__(self):        super(MWinRuleHengYang, self).__init__()        self.__pairs = [2, 5, 8]  # 将牌    def canWinAfterChiPengGang(self, tiles):        """        吃碰杠完毕后是否可以胡牌 (public api)(inherited from MWinRule)        参数：        @:param tiles 该玩家的手牌        """        return True    def isHu(self, tiles):        """        吃碰杠完毕后是否可以胡牌 (public api)(inherited from MWinRule)        参数：        @:param tiles 该玩家的手牌        """        return False    def is_win00(self, tiles):        """        是否胡00 (public api)        @param tiles: [[1,2,3,4,5....]] 花色列表        起手发牌时判断        """        HYLog.debug("isHu00: tiles: ", tiles)        if self.is_banbanhu(tiles):            return True        return False    def is_win01(self, tiles):        """        是否胡01 (public api)        @param tiles: [[1,2,3,4,5....]] 花色列表        """        HYLog.debug("isHu: tiles: ", tiles)        if self.is_xiaohu(tiles):            return True        if self.is_pengpenghu(tiles):            return True        if self.is_jiangjianghu(tiles):            return True        if self.is_qixiaodui(tiles):            return True        if self.is_quanqiuren(tiles):            return True        return False    """		小胡    """    def is_banbanhu(self, tiles):        """        是否是板板胡(public api)        @param tiles: [[1,2,3,4,5....]] 花色列表        @return boolean        起手发牌时判断(cmd:init_tiles)        板板胡描述：        当满足两个条件则称双板 (平胡积分奖励x2)        满足三个条件称三板 (平胡积分奖励x3)        胡牌需亮牌 直到另外三家都抓完第一张牌  轮到自己抓牌了  才可收起来        (板板胡后 牌局继续还是重来  让胡玩家自己选择，继续则收起亮牌，继续打，重来则结束当前牌局)        特殊小胡,和小胡是平级的,不能门清        胡牌条件：        1.起手发牌后，玩家手上已有4张一样的牌，即可胡牌（等同小胡自摸）        2.起手发牌后，玩家手上没有一张2、5、8（将牌），即可胡牌（等同小胡自摸）        3.起手发牌后，玩家手上筒、索、万任缺一门，即可胡牌（等同小胡自摸）        4.起手发牌后，玩家手上已有2个刻子（刻子：3个一样的牌），即可胡牌（等同小胡自摸）        """        # 手牌中未吃/碰/杠的牌        hand_tiles = tiles[MHand.TYPE_HAND]        tile_map = HYWinRuleFunction.find_repeat_tile_info(hand_tiles)        HYLog.debug("is_banbanhu: BanBanHu judage! tile_map: ", tile_map)        achievement = 0  # 完成条件数        triplet = 0  # 刻子        for tile in tile_map:            if tile_map[tile] == 4:  # 满足胡牌条件1                HYLog.info("is_banbanhu: BanBanHu OK! reason: 1")                # return True                achievement += 1                break        for tile in tile_map:            if tile_map[tile] == 3:  # 满足胡牌条件4                triplet += 1                if triplet >= 2:                    HYLog.info("is_banbanhu: BanBanHu OK! reason: 4")                    # return True                    achievement += 1                    break        # 满足胡牌条件2        if 2 in tile_map and tile_map[2] == 0 and 5 in tile_map and tile_map[5] == 0 and 8 in tile_map and tile_map[            8] == 0:            HYLog.info("is_banbanhu: BanBanHu OK! reason: 2")            achievement += 1        suit_map = HYWinRuleFunction.find_repeat_suit_info(hand_tiles)        if suit_map[0] == 0 or suit_map[1] == 0 or suit_map[2] == 0:  # 满足胡牌条件3            HYLog.info("is_banbanhu: BanBanHu OK! reason: 3")            achievement += 1        if achievement == 1:            HYLog.info("is_banbanhu: BanBanHu True!")        elif achievement == 2:            HYLog.info("is_banbanhu: BanBanHu double True!")        elif achievement == 3:            HYLog.info("is_banbanhu: BanBanHu triple True!")        elif achievement == 0:            HYLog.info("is_banbanhu: False!")        return False if achievement == 0 else True    def is_xiaohu(self, tiles):        """        是否小胡(public api)        @param tiles: [[1,2,3,4,5....]] 花色列表        @return boolean        摸牌或者别人打牌(胡牌均包括在tiles里)时判断        TYPE_HAND:0(握在手里的牌，未吃/碰/杠的牌)        TYPE_CHI:1(吃牌)        TYPE_PENG:2(碰牌)        TYPE_GANG:3(明杠牌)        TYPE_HU:4(和牌)        TYPE_CUR:5(最新的一手牌)        TYPE_COUNT:6(类别总数)        小胡描述：        刻子：三张一样        顺子：同花色的三张顺序牌        胡牌条件：        1. 2、5、8做将，其余成刻子或顺子，即可胡牌。        """        # 手牌中未吃/碰/杠的牌        hand_tiles = tiles[MHand.TYPE_HAND]        # find_unformed_tiles returns [不成型牌列表,刻子列表,顺子列表,杠牌列表]        tiles_infos = [HYWinRuleFunction.find_unformed_tiles(hand_tiles, 2), \                       HYWinRuleFunction.find_unformed_tiles(hand_tiles, 5), \                       HYWinRuleFunction.find_unformed_tiles(hand_tiles, 8)]        HYLog.debug("is_xiaohu: tiles pattern with pairs 2:", tiles_infos[0])        HYLog.debug("is_xiaohu: tiles pattern with pairs 5:", tiles_infos[1])        HYLog.debug("is_xiaohu: tiles pattern with pairs 8:", tiles_infos[2])        #  过滤掉没有将牌的牌型        def __filter(item):            return len(item[1]) == 2        tiles_infos = filter(__filter, tiles_infos)        #  排序按剩余牌张数量升序排序        def comp(x, y):            if len(x[0]) < len(y[0]):                return -1            elif len(x[0]) > len(y[0]):                return 1            else:                return 0        tiles_infos.sort(comp)        if len(tiles_infos) == 0:            return False        best_tiles_info = tiles_infos[0]        HYLog.info("is_xiaohu: best tiles info:", best_tiles_info)        return len(best_tiles_info[0]) == 0    def is_menqing(self, tiles):        """        是否门清(public api)        @param tiles: [[1,2,3,4,5....]] 花色列表        @return boolean        摸牌或者别人打牌(胡牌均包括在tiles里)时判断        门清描述：        不求人        胡牌条件：        必须小胡(板板胡不能)        但是小胡里不能吃碰和明杠(不求人)        胡牌可以是自摸或者接炮        """        if self.is_xiaohu(tiles):            chow_tiles = tiles[MHand.TYPE_CHI]  # 二维数组            pong_tiles = tiles[MHand.TYPE_PENG]            kong_tiles = tiles[MHand.TYPE_GANG]            hasExposedKong = False            for kong in kong_tiles:                if kong["style"] == 1:                    hasExposedKong = True                    break            if len(chow_tiles) == 0 and len(chow_tiles) == 0 and not hasExposedKong:                HYLog.info("is_menqing: is_menqing!")                return True            else:                HYLog.info("is_menqing: not is_menqing!")                return False        else:            HYLog.info("is_menqing: not is_menqing!")            return False    """		大胡    """    def is_pengpenghu(self, tiles):        """        是否碰碰胡(public api)        @param tiles: [[1,2,3,4,5....]] 花色列表        @return boolean        摸牌或者别人打牌(胡牌均包括在tiles里)时判断        碰碰胡(大胡)描述：        全是刻的牌型,任意牌都可做将        胡牌条件：        全是刻,任意牌都可做将。        """        # 手牌中未吃/碰/杠的牌        hand_tiles = tiles[MHand.TYPE_HAND]        hand_tiles_map = HYWinRuleFunction.find_repeat_tile_info(hand_tiles)        unformed_tiles = []  # 扣出将牌和顺子以后剩余的未成型手牌        has_pairs = False        for tile in hand_tiles_map:            if not has_pairs and hand_tiles_map[tile] == 2:                HYLog.info("is_pengpenghu: has pairs:", tile)                has_pairs = True            else:                # 非将牌必须成3张(刻)                if hand_tiles_map[tile] != 3:                    return False        if not has_pairs:            HYLog.info("is_pengpenghu: has no pairs!")            return False        HYLog.info("is_pengpenghu: hasPairs, count & rest tiles:", has_pairs, len(unformed_tiles), unformed_tiles)        return True    def is_jiangjianghu(self, tiles):        """        是否将将胡(public api)        @param tiles: [[1,2,3,4,5....]] 花色列表        @return boolean        摸牌或者别人打牌(胡牌均包括在tiles里)时判断        将将胡(大胡)描述：        全是2,5,8        胡牌条件：        全是2,5,8 不需要成牌        """        chow_tiles = tiles[MHand.TYPE_CHI]  # 二维数组        pong_tiles = tiles[MHand.TYPE_PENG]        kong_tiles = tiles[MHand.TYPE_GANG]        hand_tiles = tiles[MHand.TYPE_HAND]        if len(chow_tiles) > 0:  # 不能有吃牌            HYLog.info("is_jiangjianghu: has chows:", chow_tiles)            return False        for pong in pong_tiles:            if HYWinRuleFunction.do_tile_to_single_digit(pong[0]) not in self.__pairs:  # 有非2,5,8将牌                HYLog.info("is_jiangjianghu: has none 2,5,8 pong_tiles:", pong)                return False        for kong in kong_tiles:            if HYWinRuleFunction.do_tile_to_single_digit(kong["pattern"][0]) not in self.__pairs:  # 有非2,5,8将牌                HYLog.info("is_jiangjianghu: has none 2,5,8 kong_tiles:", kong)                return False        for tile in hand_tiles:            if HYWinRuleFunction.do_tile_to_single_digit(tile) not in self.__pairs:  # 有非2,5,8将牌                HYLog.info("is_jiangjianghu: has none 2,5,8 hand_tiles:", tile)                return False        HYLog.info("is_jiangjianghu: hand_tiles, pong_tiles&:kong_tiles", hand_tiles, pong_tiles, kong_tiles)        return True    def is_qingyise_inc(self, tiles):        """        是否清一色(public api)        inc:incomplete 不能独立计算        @param tiles: [[1,2,3,4,5....]] 花色列表        @return boolean        摸牌或者别人打牌(胡牌均包括在tiles里)时判断        清一色(大胡)描述：        胡牌是为同一花色，如还满足其它规则大胡，则叠加        如还满足其它规则大胡，则叠加        胡牌条件：        首先得先胡(任意胡法), 如果手牌是全部为同一花色        PS: 该处只判断手牌花色是否唯一,不能单独使用!!!!!!!!        """        chow_tiles = tiles[MHand.TYPE_CHI]  # 二维数组        pong_tiles = tiles[MHand.TYPE_PENG]        kong_tiles = tiles[MHand.TYPE_GANG]        hand_tiles = tiles[MHand.TYPE_HAND]        total_tiles = []        for chow in chow_tiles:            total_tiles.extend(chow)        for pong in pong_tiles:            total_tiles.extend(pong)        for kong in kong_tiles:            total_tiles.extend(kong["pattern"])        total_tiles.extend(hand_tiles)        count = len(total_tiles)        suits = HYWinRuleFunction.find_repeat_suit_info(total_tiles)        if suits[0] == count or suits[1] == count or suits[2] == count:            HYLog.info("is_qingyise: hand_tiles, pong_tiles&:kong_tiles:", hand_tiles, chow_tiles, pong_tiles,                       kong_tiles)            return True        else:            HYLog.info("is_qingyise: not is_qingyise hand_tiles, pong_tiles&:kong_tiles:", hand_tiles, chow_tiles,                       pong_tiles, kong_tiles)            return False    def is_qixiaodui(self, tiles):        """        是否七小对(public api)        @param tiles: [[1,2,3,4,5....]] 花色列表        @return boolean        摸牌或者别人打牌(胡牌均包括在tiles里)时判断        七小对(大胡)描述：        七个对子        胡牌条件：        七个对子, 如果存在未开杠的四张则是豪华七小对, 2个未开杠的四张叫双豪华七对        集合:        七小对        将将胡 七小对        七小对 清一色        """        chow_tiles = tiles[MHand.TYPE_CHI]  # 二维数组        pong_tiles = tiles[MHand.TYPE_PENG]        kong_tiles = tiles[MHand.TYPE_GANG]        hand_tiles = tiles[MHand.TYPE_HAND]        # 不能有吃碰杠        if len(chow_tiles) != 0 or len(pong_tiles) != 0 or len(kong_tiles) != 0:            HYLog.info("is_qixiaodui: not is_qixiaodui! has chow or pong or kong tiles!")            return False        hand_tiles_map = HYWinRuleFunction.find_repeat_tile_info(hand_tiles)        four_tiles = 0        for tile in hand_tiles_map:            if hand_tiles_map[tile] % 2 != 0:                HYLog.info("is_qixiaodui: not is_qixiaodui!")                return False            elif hand_tiles_map[tile] == 4:  # 豪华七小对                four_tiles += 1        HYLog.info("is_qixiaodui: hand_tiles, four_tiles:", hand_tiles, four_tiles)        return True, four_tiles    def is_quanqiuren(self, tiles):        """        是否全求人(public api)        @param tiles: [[1,2,3,4,5....]] 花色列表        @return boolean        摸牌或者别人打牌(胡牌均包括在tiles里)时判断        全求人(大胡)描述：        成牌后只差一张胡牌, 必须要2,5,8做将且单调2,5,8        胡牌条件：        成牌后只差一张胡牌(手牌只有一张), 必须要2,5,8做将且单调2,5,8        不能有暗杠        集合:        全求人        全求人 清一色        """        # 二维数组        kong_tiles = tiles[MHand.TYPE_GANG]        hand_tiles = tiles[MHand.TYPE_HAND]        for kong in kong_tiles:            if kong["style"] == 0:                HYLog.info("is_quanqiuren: not is_quanqiuren! has concealed kong!")                return False        if len(hand_tiles) == 2 and hand_tiles[0] in self.__pairs and hand_tiles[0] == hand_tiles[1]:            HYLog.info("is_quanqiuren: is_quanqiuren! hand_tiles:", hand_tiles)            return True        else:            HYLog.info("is_quanqiuren: not is_quanqiuren!")            return False    def is_tianhu_inc(self, isHu):        """        是否天胡(public api)        inc:incomplete 不能独立计算        @param isHu: boolean 是否胡牌        @return boolean        起手发牌(胡牌均包括在tiles里)时判断        天胡(大胡)描述：        起手发牌后胡牌        胡牌条件：        庄家        起手发牌后立即胡牌 算天胡        集合:        """        if isHu:            HYLog.info("is_tianhu_inc: True!")            return True        else:            HYLog.info("is_tianhu_inc: False")            return False    def is_dihu_inc(self, isHu):        """        是否地胡(public api)        inc:incomplete 不能独立计算        @param isHu: boolean 是否胡牌        @return boolean        起手发牌(胡牌均包括在tiles里)时判断        地胡(大胡)描述：        起手发牌后胡牌        胡牌条件：        庄家打第一张牌        闲家胡牌,庄家点炮        集合:        """        if isHu:            HYLog.info("is_dihu_inc: True")            return True        else:            HYLog.info("is_dihu_inc: False")            return False